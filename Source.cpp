#include <iostream>
#include <fstream>
#include <string>
#include <cmath>

/*
	класс векторов в трехмероном пространстве и базисов в пространстве
	рекомендую предварительно посмотреть файл "R3.h".
*/
#include "R3.h"  

using namespace std;

//функция, считывающая данные из 'configuration.file' из файла по его полному пути.
void READ(const char*); 

//=================================================================================================================================================
//=================================================================================================================================================
//===============================БЛОК КОНСТАНТ=====================================================================================================

const double λ = 0.718;      //Длина вволны рентгеновского источника, в Ангстремах

/*
	Вывод дифракции в кристаллах
	================================
				 A         |
				/|\        | d
			   / | \       |
	==========/==+==\===============
			 /   A   \
			/   /|\   \
		   /   /   \   \
		  /   / 2•θ \   \
		 ↓   ↓   |    ↑   ↑
				 ↓n

	n - вектор нормали к плоскости, n = _a*h+_b*k+_c*l и |n| = 1/d

	разность хода лучей должна быть кратна/равна λ =  2d/cos θ - 2d•tg θ•sin θ = 2d(1-sin² θ)/cos θ = 2d•cos θ
	 -> d = λ/2cos θ, |n| = 1/d, 
	 cos θ = λ|n|/2
*/

//Матрица ориентации { a, b, c }, все координаты в Ангстремах
matrix M = {    
	{0, 0, 0},
	{0, 0, 0},
	{0, 0, 0}
};

//'координаты' площади 'hkl'
double h = (double) 0, k = (double) 0, l =(double) 0;

//Находим матрицу ориентации в ОБРАТНОМ ПРОСТРАНСТВЕ
matrix _M_ = {
	{0, 0, 0},
	{0, 0, 0},
	{0, 0, 0}
};


//=================================================================================================================================================
//=================================================================================================================================================
//=================================================================================================================================================


//MAIN
int main() {
	READ("C:\\Users\\yater\\source\\repos\\Reflection\\configuration.file");   //считываем матрицу ориентации и hkl
	_M_ = M._M_();                                                             //находим матрицу ориентации в обратном пространстве

	R3 n = _M_.a * h + _M_.b * k + _M_.c * l;    //вектор нормали к плоскости d(hkl)
	double cos_θ = λ * n.length()/2;            //дифракция



	double alpha = (n.y >= 0) ?
		phi({ n.x, n.y,0 }, { 1, 0, 0 }) :
		-phi({ n.x, n.y,0 }, { 1, 0, 0 });

	double beta = asin((n.operator^({ 0,0,1 }) / n.length()));

	cout << "d(hkl) : " << n << endl;
	cout << "alpha : " << rad_to_degrees(alpha) << " degrees\nbeta : "
		<< rad_to_degrees(beta) << " degrees " << endl;

	cout << "cos_θ : " << cos_θ << endl;

 	return 0;
}


//функция считывает матрицу ориентации и hkl с из файла "PATH\\configuration.file"
void READ(const char* path_configuration_file)
{
	ifstream in(path_configuration_file);
	{ string s; std::getline(in >> s,s); }   // "//матрица ориентации"
	in >> M;

	{ string s; std::getline(in >> s,s); }   // "//координаты плоскости d(hkl)"
	in >> h >> k >> l;
	in.close();
}
